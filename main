#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>
#include <ArduinoJson.h>

// Konfigurasi WiFi
const char* ssid = "Your_WiFi_SSID";
const char* password = "Your_WiFi_Password";

// Konfigurasi MQTT
const char* mqtt_server = "your_mqtt_broker_ip";
const int mqtt_port = 1883;
const char* mqtt_user = "your_mqtt_username";
const char* mqtt_password = "your_mqtt_password";

// Topik MQTT
const char* temperature_topic = "serverroom/temperature";
const char* humidity_topic = "serverroom/humidity";
const char* smoke_topic = "serverroom/smoke";
const char* door_topic = "serverroom/door";
const char* water_topic = "serverroom/water";
const char* alert_topic = "serverroom/alerts";

// Pin sensor
#define DHT_PIN 4
#define DHT_TYPE DHT22
#define SMOKE_SENSOR_PIN 34
#define DOOR_SENSOR_PIN 35
#define WATER_SENSOR_PIN 32
#define BUZZER_PIN 25
#define LED_PIN 2

// Threshold values
const float TEMP_THRESHOLD = 35.0;    // Suhu maksimum dalam °C
const float HUMIDITY_THRESHOLD = 80.0; // Kelembaban maksimum dalam %
const int SMOKE_THRESHOLD = 500;      // Threshold sensor asap

// Inisialisasi objek
WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHT_PIN, DHT_TYPE);

// Variabel untuk pengelolaan waktu
unsigned long previousMillis = 0;
const long interval = 10000;  // Interval pengiriman data (10 detik)

void setup() {
  Serial.begin(115200);
  
  // Inisialisasi pin
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  pinMode(DOOR_SENSOR_PIN, INPUT_PULLUP);
  pinMode(WATER_SENSOR_PIN, INPUT);
  
  // Inisialisasi sensor
  dht.begin();
  
  // Mulai koneksi WiFi
  setup_wifi();
  
  // Setup MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  
  Serial.println("Server Room Monitoring System Started");
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    digitalWrite(LED_PIN, !digitalRead(LED_PIN)); // Blink LED saat connecting
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  digitalWrite(LED_PIN, HIGH); // LED menyala saat terkoneksi
}

void callback(char* topic, byte* payload, unsigned int length) {
  // Handle incoming MQTT messages jika diperlukan
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32-Client-";
    clientId += String(random(0xffff), HEX);
    
    // Attempt to connect
    if (client.connect(clientId.c_str(), mqtt_user, mqtt_password)) {
      Serial.println("connected");
      // Subscribe to topics if needed
      // client.subscribe("some/topic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void readAndPublishData() {
  // Baca data dari sensor
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  int smokeValue = analogRead(SMOKE_SENSOR_PIN);
  bool doorStatus = digitalRead(DOOR_SENSOR_PIN);
  bool waterDetected = digitalRead(WATER_SENSOR_PIN);
  
  // Periksa jika pembacaan sensor gagal
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
  
  // Buat objek JSON untuk data
  StaticJsonDocument<200> doc;
  doc["temperature"] = temperature;
  doc["humidity"] = humidity;
  doc["smoke"] = smokeValue;
  doc["door_open"] = doorStatus;
  doc["water_detected"] = waterDetected;
  
  char jsonBuffer[200];
  serializeJson(doc, jsonBuffer);
  
  // Publish data ke MQTT
  client.publish("serverroom/data", jsonBuffer);
  
  // Publish nilai individual untuk kemudahan penggunaan
  client.publish(temperature_topic, String(temperature).c_str());
  client.publish(humidity_topic, String(humidity).c_str());
  client.publish(smoke_topic, String(smokeValue).c_str());
  client.publish(door_topic, doorStatus ? "OPEN" : "CLOSED");
  client.publish(water_topic, waterDetected ? "WATER_DETECTED" : "NO_WATER");
  
  // Cek kondisi alert
  checkAlerts(temperature, humidity, smokeValue, doorStatus, waterDetected);
  
  // Print data ke serial monitor
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" °C");
  
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");
  
  Serial.print("Smoke: ");
  Serial.println(smokeValue);
  
  Serial.print("Door: ");
  Serial.println(doorStatus ? "OPEN" : "CLOSED");
  
  Serial.print("Water: ");
  Serial.println(waterDetected ? "DETECTED" : "NOT DETECTED");
  
  Serial.println("------------------------");
}

void checkAlerts(float temp, float humidity, int smoke, bool doorOpen, bool waterDetected) {
  bool alert = false;
  String alertMessage = "";
  
  if (temp > TEMP_THRESHOLD) {
    alert = true;
    alertMessage += "High temperature: " + String(temp) + "°C. ";
  }
  
  if (humidity > HUMIDITY_THRESHOLD) {
    alert = true;
    alertMessage += "High humidity: " + String(humidity) + "%. ";
  }
  
  if (smoke > SMOKE_THRESHOLD) {
    alert = true;
    alertMessage += "Smoke detected: " + String(smoke) + ". ";
  }
  
  if (doorOpen) {
    alert = true;
    alertMessage += "Server room door is open. ";
  }
  
  if (waterDetected) {
    alert = true;
    alertMessage += "Water leakage detected. ";
  }
  
  if (alert) {
    client.publish(alert_topic, alertMessage.c_str());
    digitalWrite(BUZZER_PIN, HIGH); // Aktifkan buzzer
    Serial.println("ALERT: " + alertMessage);
  } else {
    digitalWrite(BUZZER_PIN, LOW); // Matikan buzzer
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    readAndPublishData();
  }
}
